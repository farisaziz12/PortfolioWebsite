"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withBreakpoints = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaultBreakpoints = {
  sm: [0, 500],
  md: [501, 768],
  lg: [769, 1100]
};

var Provider = function (_Component) {
  _inherits(Provider, _Component);

  function Provider() {
    _classCallCheck(this, Provider);

    return _possibleConstructorReturn(this, (Provider.__proto__ || Object.getPrototypeOf(Provider)).apply(this, arguments));
  }

  _createClass(Provider, [{
    key: "getChildContext",
    value: function getChildContext() {
      var _props = this.props,
          _props$breakpoints = _props.breakpoints,
          propsBreakpoints = _props$breakpoints === undefined ? {} : _props$breakpoints,
          propsPadding = _props.padding;
      var _context = this.context,
          _context$breakpoints = _context.breakpoints,
          contextBreakpoints = _context$breakpoints === undefined ? {} : _context$breakpoints,
          contextPadding = _context.padding;


      return {
        breakpoints: _extends({}, defaultBreakpoints, contextBreakpoints, propsBreakpoints),
        padding: propsPadding || contextPadding || "5px"
      };
    }
  }, {
    key: "render",
    value: function render() {
      return _react.Children.only(this.props.children);
    }
  }]);

  return Provider;
}(_react.Component);

Provider.propTypes = {
  children: _propTypes2.default.node,
  breakpoints: _propTypes2.default.object,
  padding: _propTypes2.default.string
};
Provider.contextTypes = {
  breakpoints: _propTypes2.default.object,
  padding: _propTypes2.default.string
};
Provider.childContextTypes = {
  breakpoints: _propTypes2.default.object,
  padding: _propTypes2.default.string
};
exports.default = Provider;
var withBreakpoints = exports.withBreakpoints = function withBreakpoints(WrappedComponent) {
  var _class, _temp;

  return (
    // eslint-disable-next-line react/no-multi-comp
    _temp = _class = function (_Component2) {
      _inherits(GridProvider, _Component2);

      function GridProvider() {
        _classCallCheck(this, GridProvider);

        return _possibleConstructorReturn(this, (GridProvider.__proto__ || Object.getPrototypeOf(GridProvider)).apply(this, arguments));
      }

      _createClass(GridProvider, [{
        key: "render",
        value: function render() {
          var _context2 = this.context,
              breakpoints = _context2.breakpoints,
              padding = _context2.padding;


          return _react2.default.createElement(WrappedComponent, _extends({}, this.props, {
            breakpoints: breakpoints,
            padding: padding
          }));
        }
        // eslint-disable-line  react/prefer-stateless-function

      }]);

      return GridProvider;
    }(_react.Component), _class.contextTypes = {
      breakpoints: _propTypes2.default.object,
      padding: _propTypes2.default.string
    }, _temp
  );
};